rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isModerator() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'moderator'];
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // User profiles - users can read any profile but only update their own
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Tasks - varies based on personal/community designation
    match /tasks/{taskId} {
      // Helper to check if user is task creator
      function isCreator() {
        return isAuthenticated() && resource.data.createdBy == request.auth.uid;
      }
      
      // Helper to check if user is assigned to task
      function isAssigned() {
        return isAuthenticated() && 
               exists(/databases/$(database)/documents/task_assignments/$(taskId)_$(request.auth.uid));
      }
      
      // Anyone logged in can read community tasks
      allow read: if isAuthenticated() && !resource.data.isPersonal;
      
      // Personal tasks can only be read by creator
      allow read: if resource.data.isPersonal && isCreator();
      
      // Anyone logged in can create tasks
      allow create: if isAuthenticated() && 
                      request.resource.data.createdBy == request.auth.uid;
      
      // Updates allowed by admin, moderator, creator, or assignee
      allow update: if isAdmin() || isModerator() || isCreator() || isAssigned();
      
      // Only admin, moderator, or creator can delete
      allow delete: if isAdmin() || isModerator() || isCreator();
    }
    
    // Task assignments
    match /task_assignments/{assignmentId} {
      // Helper to check if assignment is for current user
      function isAssignmentForUser() {
        return isAuthenticated() && resource.data.userId == request.auth.uid;
      }
      
      // Helper to check if user is task creator
      function isTaskCreator() {
        return isAuthenticated() && 
               get(/databases/$(database)/documents/tasks/$(resource.data.taskId)).data.createdBy == request.auth.uid;
      }
      
      // Allow reading any assignment for tasks user can read
      allow read: if isAuthenticated() && (
                    !get(/databases/$(database)/documents/tasks/$(resource.data.taskId)).data.isPersonal || 
                    get(/databases/$(database)/documents/tasks/$(resource.data.taskId)).data.createdBy == request.auth.uid
                  );
      
      // Allow creating if user is admin, moderator, or task creator
      allow create: if isAdmin() || isModerator() || 
                      (isAuthenticated() && request.resource.data.assignedBy == request.auth.uid &&
                       get(/databases/$(database)/documents/tasks/$(request.resource.data.taskId)).data.createdBy == request.auth.uid);
      
      // Allow updates by admin, moderator, task creator or assignee
      allow update: if isAdmin() || isModerator() || isTaskCreator() || isAssignmentForUser();
      
      // Allow deletion by admin, moderator, task creator or the assigned user
      allow delete: if isAdmin() || isModerator() || isTaskCreator() || isAssignmentForUser();
    }
    
    // Comments
    match /comments/{commentId} {
      // Helper to check if user is comment author
      function isAuthor() {
        return isAuthenticated() && resource.data.userId == request.auth.uid;
      }
      
      // Helper to check if user can access the content being commented on
      function canAccessContent() {
        let contentType = resource.data.contentType;
        let contentId = resource.data.contentId;
        
        // For tasks, check if user can read the task
        return contentType == 'task'
          ? !get(/databases/$(database)/documents/tasks/$(contentId)).data.isPersonal || 
            get(/databases/$(database)/documents/tasks/$(contentId)).data.createdBy == request.auth.uid
          : true; // Default case for other content types
      }
      
      // Allow reading if user can access content
      allow read: if isAuthenticated() && canAccessContent();
      
      // Allow creating if user is authenticated
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      
      // Allow updating if user is author, admin, or moderator
      allow update: if isAuthor() || isAdmin() || isModerator();
      
      // Allow deletion if user is author, admin, or moderator
      allow delete: if isAuthor() || isAdmin() || isModerator();
    }
    
    // Likes
    match /likes/{likeId} {
      // Helper to check if user is liker
      function isLiker() {
        return isAuthenticated() && resource.data.userId == request.auth.uid;
      }
      
      // Helper to check if user can access the content being liked
      function canAccessContent() {
        let contentType = resource.data.contentType;
        let contentId = resource.data.contentId;
        
        // For tasks, check if user can read the task
        return contentType == 'task'
          ? !get(/databases/$(database)/documents/tasks/$(contentId)).data.isPersonal || 
            get(/databases/$(database)/documents/tasks/$(contentId)).data.createdBy == request.auth.uid
          : true; // Default case for other content types
      }
      
      // Allow reading if user can access content
      allow read: if isAuthenticated() && canAccessContent();
      
      // Allow creating if user is authenticated
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      
      // Only allow user to delete their own likes
      allow delete: if isLiker();
    }
    
    // Shares
    match /shares/{shareId} {
      // Helper to check if user is sharer
      function isSharer() {
        return isAuthenticated() && resource.data.userId == request.auth.uid;
      }
      
      // Helper to check if user can access the content being shared
      function canAccessContent() {
        let contentType = resource.data.contentType;
        let contentId = resource.data.contentId;
        
        // For tasks, check if user can read the task
        return contentType == 'task'
          ? !get(/databases/$(database)/documents/tasks/$(contentId)).data.isPersonal || 
            get(/databases/$(database)/documents/tasks/$(contentId)).data.createdBy == request.auth.uid
          : true; // Default case for other content types
      }
      
      // Allow reading if user can access content
      allow read: if isAuthenticated() && canAccessContent();
      
      // Allow creating if user is authenticated
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      
      // Allow deletion if user is sharer, admin, or moderator
      allow delete: if isSharer() || isAdmin() || isModerator();
    }
    
    // Notifications - users can only access their own notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAdmin(); // Only admin/system can create notifications
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid; // Users can mark as read
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Activity feed
    match /activities/{activityId} {
      // Public activities can be read by any authenticated user
      allow read: if isAuthenticated() && resource.data.isPublic;
      
      // Personal activities can only be read by the user
      allow read: if isAuthenticated() && !resource.data.isPublic && resource.data.userId == request.auth.uid;
      
      // Only admin/system can create activities
      allow create: if isAdmin();
      allow update: if false; // Activities should not be updated
      allow delete: if isAdmin();
    }
    
    // Admin logs - only accessible by admins
    match /admin_logs/{logId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }
  }
}
