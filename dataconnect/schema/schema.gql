# TechServ Community Garden - Data Connect Schema

# GardenUser table is keyed by Firebase Auth UID
type GardenUser @table {
  # `@default(expr: "auth.uid")` sets it to Firebase Auth UID during insert and upsert
  id: String! @default(expr: "auth.uid")
  displayName: String! @col(dataType: "varchar(100)")
  email: String! @col(dataType: "varchar(255)")
  photoURL: String
  role: String @col(dataType: "varchar(50)")
  joinedDate: Date! @default(expr: "request.time")
  # Relationships are created automatically through foreign keys
}

# Plot represents a garden plot
type Plot @table {
  # Auto-generated UUID
  id: UUID! @default(expr: "uuidV4()")
  plotNumber: String! @col(dataType: "varchar(20)")
  sizeInSqFt: Float
  location: String @col(dataType: "varchar(100)")
  assignedTo: GardenUser
  # PlantInstance relationship is handled automatically
  soilType: String
  sunExposure: String @col(dataType: "varchar(50)")
  isActive: Boolean! @default(value: true)
  lastWatered: Date
}

# Plant represents a plant type that can be grown
type Plant @table {
  id: UUID! @default(expr: "uuidV4()")
  name: String! @col(dataType: "varchar(100)")
  scientificName: String @col(dataType: "varchar(100)")
  plantType: String @col(dataType: "varchar(50)")  # vegetable, herb, flower, etc.
  growingSeason: String @col(dataType: "varchar(50)")
  sunRequirement: String @col(dataType: "varchar(50)")
  waterRequirement: String @col(dataType: "varchar(50)")
  daysToHarvest: Int
  spacingInInches: Int
  companions: String
  imageUrl: String
  # PlantInstance relationship is handled automatically
}

# PlantInstance is a specific plant in a specific plot
type PlantInstance @table {
  id: UUID! @default(expr: "uuidV4()")
  plantType: Plant!
  plot: Plot!
  plantedDate: Date! @default(expr: "request.time")
  expectedHarvestDate: Date
  status: String @col(dataType: "varchar(50)")  # growing, harvested, removed
  notes: String
}

# Task represents garden tasks
type Task @table {
  id: UUID! @default(expr: "uuidV4()")
  title: String! @col(dataType: "varchar(100)")
  description: String
  category: String @col(dataType: "varchar(50)")  # watering, weeding, planting, etc.
  priority: String @col(dataType: "varchar(20)")  # high, medium, low
  status: String @col(dataType: "varchar(20)")  # pending, in progress, completed
  dueDate: Date
  createdAt: Date! @default(expr: "request.time")
  createdBy: GardenUser
  assignedTo: GardenUser
  relatedPlot: Plot
}

# Events for garden activities
type Event @table {
  id: UUID! @default(expr: "uuidV4()")
  title: String! @col(dataType: "varchar(100)")
  description: String
  startTime: Timestamp!
  endTime: Timestamp!
  location: String @col(dataType: "varchar(100)")
  eventType: String @col(dataType: "varchar(50)")  # workshop, work day, celebration
  organizer: GardenUser
  # Event attendees relationship is handled automatically
  maxAttendees: Int
  createdAt: Date! @default(expr: "request.time")
}

# Event Attendees join table
type EventAttendee @table(key: ["event", "user"]) {
  event: Event!
  user: GardenUser!
  rsvpStatus: String! @col(dataType: "varchar(20)")  # attending, maybe, declined
  rsvpDate: Timestamp! @default(expr: "request.time")
}

# Resource for garden knowledge and information
type Resource @table {
  id: UUID! @default(expr: "uuidV4()")
  title: String! @col(dataType: "varchar(100)")
  content: String!
  category: String! @col(dataType: "varchar(50)")  # guides, tips, policies
  tags: String @col(dataType: "varchar(255)")
  author: GardenUser
  createdAt: Date! @default(expr: "request.time")
  updatedAt: Date
  imageUrl: String
}

# Weather Data for garden conditions
type WeatherRecord @table {
  id: UUID! @default(expr: "uuidV4()")
  recordDate: Date! @default(expr: "request.time")
  temperature: Float
  humidity: Float
  rainfall: Float
  notes: String
}
