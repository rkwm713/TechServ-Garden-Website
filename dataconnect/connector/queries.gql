# TechServ Community Garden - Queries

# Get current user profile and assigned plots
query GetCurrentUser @auth(level: USER) {
  currentUser: gardenUser(key: { id_expr: "auth.uid" }) {
    id
    displayName
    email
    photoURL
    role
    joinedDate
    # Get plots assigned to this user through reverse lookup
    plots: plots_on_assignedTo {
      id
      plotNumber
      sizeInSqFt
      location
      soilType
      sunExposure
      isActive
      lastWatered
    }
  }
}

# List all garden plots (with optional filters)
query ListGardenPlots($isActive: Boolean) @auth(level: USER) {
  plots(where: { isActive: { eq: $isActive } }) {
    id
    plotNumber
    location
    sizeInSqFt
    sunExposure
    assignedTo {
      id
      displayName
    }
    isActive
    lastWatered
  }
}

# Get detailed plot information with current plants
query GetPlotDetails($plotId: UUID!) @auth(level: USER) {
  plot(id: $plotId) {
    id
    plotNumber
    sizeInSqFt
    location
    soilType
    sunExposure
    isActive
    lastWatered
    assignedTo {
      id
      displayName
      email
    }
    # Get plant instances in this plot through reverse lookup
    plants: plantInstances_on_plot {
      id
      plantedDate
      expectedHarvestDate
      status
      notes
      plantType {
        id
        name
        scientificName
        growingSeason
        daysToHarvest
        imageUrl
      }
    }
  }
}

# List all plants in the database
query ListPlants @auth(level: PUBLIC) {
  plants {
    id
    name
    scientificName
    plantType
    growingSeason
    sunRequirement
    waterRequirement
    daysToHarvest
    spacingInInches
    companions
    imageUrl
  }
}

# Search plants by name or type
query SearchPlants($searchTerm: String!) @auth(level: PUBLIC) {
  plants(
    where: {
      _or: [
        { name: { contains: $searchTerm } },
        { scientificName: { contains: $searchTerm } },
        { plantType: { contains: $searchTerm } }
      ]
    }
  ) {
    id
    name
    scientificName
    plantType
    growingSeason
    imageUrl
  }
}

# List tasks with filters
query ListTasks($status: String, $category: String) @auth(level: USER) {
  tasks(
    where: {
      _and: [
        { status: { eq: $status } },
        { category: { eq: $category } }
      ]
    },
    orderBy: { dueDate: ASC }
  ) {
    id
    title
    description
    category
    priority
    status
    dueDate
    createdAt
    assignedTo {
      id
      displayName
    }
    relatedPlot {
      id
      plotNumber
    }
  }
}

# Get assigned tasks for current user
query GetMyTasks @auth(level: USER) {
  tasks(
    where: { assignedTo: { id: { eq_expr: "auth.uid" } } },
    orderBy: { dueDate: ASC }
  ) {
    id
    title
    description
    category
    priority
    status
    dueDate
    relatedPlot {
      id
      plotNumber
    }
  }
}

# List upcoming events
query ListUpcomingEvents @auth(level: PUBLIC) {
  events(
    where: { startTime: { gt_expr: "request.time" } },
    orderBy: { startTime: ASC }
  ) {
    id
    title
    description
    startTime
    endTime
    location
    eventType
    maxAttendees
    organizer {
      id
      displayName
    }
  }
}

# Get event details with attendees
query GetEventDetails($eventId: UUID!) @auth(level: USER) {
  event(id: $eventId) {
    id
    title
    description
    startTime
    endTime
    location
    eventType
    maxAttendees
    organizer {
      id
      displayName
    }
    # Get attendees through reverse lookup
    attendees: eventAttendees_on_event {
      user {
        id
        displayName
      }
      rsvpStatus
      rsvpDate
    }
  }
}

# List resources/knowledge articles
query ListResources($category: String) @auth(level: PUBLIC) {
  resources(
    where: { category: { eq: $category } },
    orderBy: { createdAt: DESC }
  ) {
    id
    title
    category
    tags
    createdAt
    imageUrl
    author {
      id
      displayName
    }
  }
}

# Get resource details
query GetResourceDetails($resourceId: UUID!) @auth(level: PUBLIC) {
  resource(id: $resourceId) {
    id
    title
    content
    category
    tags
    createdAt
    updatedAt
    imageUrl
    author {
      id
      displayName
    }
  }
}

# Get recent weather data
query GetRecentWeather($days: Int!) @auth(level: PUBLIC) {
  weatherRecords(
    orderBy: { recordDate: DESC },
    limit: $days
  ) {
    id
    recordDate
    temperature
    humidity
    rainfall
    notes
  }
}
